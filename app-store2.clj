[:version 77]
[:updated 1321579284051]
[:configuration {:SSH {:interstate-delay "3000", :stats-cache-len "10", :parameters {:port "22", :- "-"}, :instances {:DRP {:param-map {:host "10.1.1.9", :- "-"}}, :Primaria {:param-map {:- "-", :host "localhost"}}}, :states [{:key ":inicio", :conf-map {:opr "sleep-opr", :conf {:delta "3000"}}, :flow {:connect [":google"], :x "100", :y "100"}} {:key ":google", :flow {:connect [":ssh"], :x "99", :y "51"}, :conf-map {:retry-count "3", :conf {:url "http://google.com"}, :opr "get-http-opr", :retry-delay "1000", :timeout "5000"}} {:key ":ssh", :flow {:connect [":bad" ".*Exception.*" ":good"], :x "294", :y "52"}, :conf-map {:retry-count "3", :opr "socket-opr", :conf {:port ":port", :host ":host"}, :retry-delay "1000", :timeout "300"}} {:key ":good", :conf-map {:opr "switch-good-opr"}, :flow {:connect [":inicio"], :x "236", :y "104"}} {:key ":bad", :flow {:connect [":alert" "send" ":inicio"], :x "293", :y "169"}, :conf-map {:opr "switch-bad-opr", :conf {:minutes2wait "5"}}} {:key ":alert", :flow {:connect [":inicio"], :x "101", :y "168"}, :conf-map {:opr "send-mail-opr", :retry-delay "", :timeout "15000", :retry-count "", :conf {:text-vec "El problema es :ssh", :passwd "jalajoga142857", :port "465", :to-vec "ecapistran@interware.com.mx", :host "smtp.gmail.com", :user "fgerard@interware.com.mx", :ssl "true", :subject "Problemas :host :port"}}}]}, :TestMail {:interstate-delay "1000", :stats-cache-len "10", :parameters {:- "-"}, :instances {:Tester {:param-map {:- "-"}}}, :states [{:key ":inicio", :conf-map {:opr "sleep-opr", :conf {:delta "1000"}}, :flow {:connect [":send-mail"], :x "85", :y "105"}} {:key ":send-mail", :flow {:x "235", :y "136"}, :conf-map {:retry-count "", :opr "send-mail-opr", :retry-delay "", :conf {:text-vec "Saludos Bye", :ssl "true", :subject "Prueba", :passwd "jalajoga142857", :port "465", :to-vec "fgerard@interware.com.mx", :host "smtp.gmail.com", :user "fgerard@interware.com.mx"}, :timeout "30000"}}]}, :Verifier {:interstate-delay "100", :instances {:Primaria {:param-map {:- "-"}}}, :stats-cache-len "10", :parameters {:port "22", :host "localhost", :day-night "13", :night-day "6", :- "-", :n "40000"}, :states [{:key ":inicio", :conf-map {:opr "sleep-opr", :conf {:delta "100"}}, :flow {:connect [":xxx"], :x "100", :y "100"}} {:key ":xxx", :flow {:connect [":yyy2"], :x "246", :y "69"}, :conf-map {:opr "clojure-opr", :conf {:code "(fn [ctx]\n  (let [ant (:ant ctx)\n         n (if (nil? ant) (reduce * (range 1N (inc (Integer/parseInt (:n ctx))))) ant)\n         l (.length (str n))]\n    {:result (str (:n ctx) \"! tiene \" l \" digitos\")\n     (keyword (str \"nn\" (:n ctx))) (str n)\n     :ant (str n)}))"}}} {:key ":yyy", :flow {:connect [":ppp"], :x "288", :y "285"}, :conf-map {:opr "js-opr", :conf {:code "function(ctx) {\n  var n=parseInt(ctx.n,10)+1;\n  return {result: \"\"+n, n: \"\"+n};\n}"}}} {:key ":ppp", :flow {:connect [":inicio"], :x "250", :y "178"}, :conf-map {:opr "print-context-opr", :conf {:filter-re ".*"}}} {:key ":yyy2", :flow {:connect [":ppp"], :x "352", :y "120"}, :conf-map {:opr "clojure-opr", :conf {:code "(fn [ctx]\n  (let [n (+ (Integer/parseInt (:n ctx)) 1)]\n    {:result (str n) :n (str n)}))\n"}}}]}}]
